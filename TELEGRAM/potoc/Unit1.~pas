unit Unit1;

interface

uses
   Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
   Dialogs, StdCtrls, XPMan, Agg2D, jpeg, FileCtrl, ExtCtrls;

type
   TSomeThread = class(tthread)
   private
      s: string;
      Stop: Boolean;
      Busy: integer;
      procedure addstr(TT: string);
      procedure threadwork;
   protected
      procedure execute; override;
      procedure Convert(SS: string);
   end;

   TForm1 = class(TForm)
      Button1: TButton;
      Button2: TButton;
      Memo1: TMemo;
      XPManifest1: TXPManifest;
      Button3: TButton;
      Edit1: TEdit;
      Memo2: TMemo;
      procedure Button1Click(Sender: TObject);
      procedure Button3Click(Sender: TObject);
   private
      { Private declarations }
   public
      Threads: Integer;
      { Public declarations }
   end;

var
   Form1: TForm1;
   firstThread, secondThread, Thread3: TSomeThread;

implementation

{$R *.dfm}

procedure TSomeThread.Convert(SS: string);
var
   B: TBitmap;
   VG: TAgg2D;
   jpeg: TJPEGImage;
   i, j: integer;
   Img: TPicture;
begin
   addstr('»нициализаци€ графических обьектов...');
   Img := TPicture.Create;

   //—оздаем JPEG
   jpeg := TJPEGImage.Create;
   jpeg.CompressionQuality := 100; {уровень компрессии - 100 наилучшее качество}
   jpeg.LoadFromFile(SS);

   //—оздаем экземпл€р BMP
   B := TBitmap.Create;
   B.Width := jpeg.Width;
   B.Height := jpeg.Height;
   B.PixelFormat := pf32bit;

   //ѕереносим картинку из JPG в BMP
   addstr('”становка св€зи с исходным изображением: ' + SS);
   B.Assign(jpeg);

   Img.Bitmap.PixelFormat := pf32bit;

   VG := TAgg2D.Create;

   if VG.Attach(B) then
   begin
      addstr('–исуем вод€ной знак...');
      // Normal Text
      VG.LineColor($00, $00, $8B, 190); // последнее значнеие прозрачность, 255 не прозрачное 0 - прозрачное
      VG.FillColor($1E, $90, $FF, 130);

      VG.Font('Times New Roman', 130);
      VG.Text(b.Width - 600, b.Height - 30, 'TEST!!!!');

      // Upside-down Text
      VG.FlipText(true);

      VG.LineColor($C0, $C0, $C0, 90);
      VG.FillColor($C0, $C0, $C0, 90);

      VG.Font('Times New Roman', 130);
      VG.Text(b.Width - 600, b.Height - 30, 'TEST!!!!');

      VG.FillColor(115, 200, 100);
      VG.Ellipse(b.Width - 80, b.Height - 50, 50, 50);
      VG.FillColor(0, 0, 0);
      VG.Ellipse(b.Width - 50 - 50, b.Height - 20 - 50, 10, 10);
      VG.Ellipse(b.Width - 50 - 50 + 50, b.Height - 20 - 50, 10, 10);
      VG.FillColor(0, 0, 0);
   end;

   addstr('—охран€ем готовое изображение...');
   Img.Bitmap.Assign(B);
   //—охран€ем
   jpeg.Assign(B);
   jpeg.SaveToFile(SS);

   VG.Free;
   jpeg.Free;
   Img.Free;
   B.Free;

end;

procedure TSomeThread.execute;
begin
   inherited;
   Busy := 1;
   Synchronize(threadwork);

   Convert(S);

   Busy := -1;
   Synchronize(threadwork);
   Terminate;
end;

procedure TSomeThread.threadwork;
begin
   form1.Threads := form1.Threads + Busy;
end;

procedure TSomeThread.addstr(TT: string);
begin
   form1.Memo2.lines.add(TT);
end;

procedure TForm1.Button1Click(Sender: TObject);
var
   code: LongInt;
   i, n: integer;
begin
   {
   tpIdle Ч низший приоритет. ѕоток получает врем€ только тогда, когда операционна€ система находитс€ в состо€нии просто€.
   tpLowest Ч приоритет на два пункта ниже нормального.
   tpLower Ч приоритет на один пункт ниже нормального.
   tpNormal Ч нормальный приоритет.
   tpHigher Ч приоритет на один пункт выше нормального.
   tpHighest Ч приоритет на два пункта выше нормального.
   tpTimeCritical Ч максимальный приоритет. ѕриоритет на уровне функций €дра операционной системы.
   }

   n := 0;
   while n <= memo1.Lines.Count do
   begin
      Application.ProcessMessages;

      if Threads < 1 then
      begin
         inc(n);

         firstThread := TSomeThread.create(true);
         firstThread.freeonterminate := true;
         firstThread.s := Memo1.Lines.Strings[n];
         firstThread.priority := tpNormal;

         firstThread.resume;
      end;
   end;
end;

procedure TForm1.Button3Click(Sender: TObject);
var
   B: TBitmap;
   VG: TAgg2D;
   jpeg: TJPEGImage;
   searchResult: TSearchRec;
   imageDirectory, imageFilePath, outputDirectory, outputImagePath, SelectedFolder, SelecteToSave: string;
   c1, c2: TAggColor;

begin
   SelectDirectory('¬ыберите папку', '', SelectedFolder);
   imageDirectory := SelectedFolder;
   Edit1.Text := imageDirectory;

   memo1.Lines.Clear;

   if FindFirst(IncludeTrailingPathDelimiter(imageDirectory) + '*.jpg', faAnyFile, searchResult) = 0 then
   begin
      repeat
         imageFilePath := IncludeTrailingPathDelimiter(imageDirectory) + searchResult.Name;
         memo1.Lines.Add(imageFilePath);

      until FindNext(searchResult) <> 0;
      FindClose(searchResult);
   end;
end;

end.

